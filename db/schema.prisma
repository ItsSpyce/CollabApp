// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DEFAULT
  TEST
  ADMIN
}

enum EventRole {
  MEMBER
  OWNER
}

enum InvitationStatus {
  NO_RESPONSE
  ACCEPTED
  REJECTED
  PENDING
}

enum NotificationSource {
  SYSTEM
  INVITATION
}

model User {
  id                String   @id
  email             String   @unique
  name              String
  photo             String?
  createdAt         DateTime @default(now()) @map(name: "created")
  updatedAt         DateTime @default(now()) @map(name: "updated")
  subscriptionLevel Int      @default(0)
  role              UserRole @default(DEFAULT)
  timezoneOffset    Int      @default(0)

  invitations   Invitation[]
  notifications Notification[]
  sessions      Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Invitation {
  bookingId Int
  booking   Booking          @relation(fields: [bookingId], references: [id])
  toId      String
  to        User             @relation(fields: [toId], references: [id])
  status    InvitationStatus @default(NO_RESPONSE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@id([bookingId, toId])
}

model Booking {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  name        String
  description String
  color       String
  createdAt   DateTime  @default(now()) @map(name: "created")
  updatedAt   DateTime  @updatedAt @map(name: "updated")
  startsAt    DateTime?
  endsAt      DateTime?

  invitations Invitation[]
}

model Notification {
  id        Int                @id @default(autoincrement())
  source    NotificationSource @default(SYSTEM)
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime           @default(now()) @map(name: "created")
  updatedAt DateTime           @updatedAt
  isRead    Boolean            @default(false)
}
